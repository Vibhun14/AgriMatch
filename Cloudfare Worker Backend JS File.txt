// THIS IS STORED ON A BACKEND SERVER, SO I INSERTED IT HERE AS A TXT FILE

const RATE_LIMIT_WINDOW = 60 * 1000; // 1 minute
const RATE_LIMIT_MAX = 60;

const ipAccessMap = new Map();

export default {
  async fetch(request, env, ctx) {
    const ip = request.headers.get("CF-Connecting-IP") || "unknown";

    // Handle GET request (for browser access)
    if (request.method === "GET") {
      return new Response("Gemini Proxy is active. Send a POST request with JSON to use the API.", {
        status: 200,
        headers: { "Content-Type": "text/plain" },
      });
    }

    // Allow only POST for Gemini calls
    if (request.method !== "POST") {
      return new Response("Method not allowed", { status: 405 });
    }

    // Rate limiting logic
    const now = Date.now();
    for (const [key, value] of ipAccessMap.entries()) {
      if (now - value.startTime > RATE_LIMIT_WINDOW) {
        ipAccessMap.delete(key);
      }
    }

    const record = ipAccessMap.get(ip) || { count: 0, startTime: now };

    if (now - record.startTime < RATE_LIMIT_WINDOW) {
      if (record.count >= RATE_LIMIT_MAX) {
        return new Response(
          JSON.stringify({ error: "Rate limit exceeded. Max 60 requests per minute." }),
          {
            status: 429,
            headers: {
              "Content-Type": "application/json",
              "Retry-After": "60",
              "Access-Control-Allow-Origin": "*",
            },
          }
        );
      }
      record.count++;
    } else {
      record.count = 1;
      record.startTime = now;
    }

    ipAccessMap.set(ip, record);

    try {
      const requestBody = await request.json();

      const geminiURL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${env.GEMINI_API_KEY}`;
      const geminiRes = await fetch(geminiURL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(requestBody),
      });

      const geminiData = await geminiRes.text();
      return new Response(geminiData, {
        status: geminiRes.status,
        headers: {
          "Content-Type": "application/json",
          "Access-Control-Allow-Origin": "*",
        },
      });

    } catch (error) {
      return new Response(JSON.stringify({ error: error.message }), {
        status: 500,
        headers: { "Content-Type": "application/json" },
      });
    }
  }
};
